generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.

model User {
  id            String    @id @default(cuid())
  name          String    // Cannot be null
  email         String    @unique // Cannot be null (also unique)
  role          Role      @default(CLIENT) // Cannot be null (has a default)
  status        String    // Cannot be null
  address       String?   // Can be null
  phone         String?   // Can be null
  emailVerified DateTime? // Can be null
  image         String?   // Can be null
  password      String?   // Can be null
  accounts      Account[] // Can be empty
  sessions      Session[] // Can be empty
  createdAt     DateTime?  @default(now()) // Automatically populates on creation
  updatedAt     DateTime?  @updatedAt // Automatically updates on each update
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  CLIENT
  RESPONSABLE
  TECHNICIEN
  SUPERADMIN
  COMMERCIAL
  ADMIN
  JURIDIQUE
  CLIENTADMIN
  COMPTABLE
}

