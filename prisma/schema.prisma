generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id @default(cuid())
  name                String
  email               String             @unique
  role                Role               @default(CLIENT)
  status              UserStatus         @default(PENDING)
  address             String?
  phone               String?
  verificationToken   String?
  emailVerified       Boolean            @default(false)
  image               String?
  password            String?
  resetPasswordToken  String?            @unique
  resetPasswordExpires DateTime?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  accounts            Account[]
  sessions            Session[]
  notifications       Notification[]
  contracts           Contract[]
  inventoryMoves      InventoryMovement[]
  serviceRequests     ServiceRequest[] @relation("TechnicianServiceRequests")
  locationHistory     LocationHistory[]
  prospects           Prospect[]
  prospectActions     ProspectAction[]
  quotes              Quote[]
  reports             Report[]
  kiosks              UserKiosk[]        // Many-to-many relationship with Kiosk model
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Kiosk {
  id                    Int      @id @default(autoincrement())
  kioskName             String
  clientName            String?
  kioskAddress          String?
  gpsLatitude           Float?
  gpsLongitude          Float?
  productTypes          String?
  managerName           String?
  managerContacts       String?
  locationId            String?
  status                KioskStatus @default(REQUEST)
  type                  KioskType    @default(ONE_COMPARTMENT_WITHOUT_BRANDING)
  image                 String?
  averageMonthlyRevenue Decimal?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  contracts             Contract[]
  inventory             KioskInventory[]
  inventoryMoves        InventoryMovement[]
  serviceRequests       ServiceRequest[]
  locationHistory       LocationHistory[]
  users                 UserKiosk[]  // Many-to-many relationship with User model
}

model UserKiosk {
  id      String   @id @default(cuid())
  userId  String
  kioskId Int

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  kiosk Kiosk @relation(fields: [kioskId], references: [id])

  @@unique([userId, kioskId])
}

model Contract {
  id                  String    @id @default(cuid())
  user                User      @relation(fields: [userId], references: [id])
  userId              String
  kiosk               Kiosk     @relation(fields: [kioskId], references: [id])
  kioskId             Int
  type                String?
  amount              Decimal?
  startDate           DateTime 
  endDate             DateTime?
  status              ContractStatus @default(PENDING)
  responsibilities    String?
  cancellationTerms   String?
  contractNumber      String?
  paymentMethod       String?
  lateFee             Decimal?
  note                String?
  documents           String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  invoices            Invoice[]
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String?
  category    ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId  String
  unitPrice   Decimal
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  inventory   KioskInventory[]
  moves       InventoryMovement[]
}

model ServiceRequest {
  id                  String    @id @default(cuid())
  kiosk               Kiosk     @relation(fields: [kioskId], references: [id])
  kioskId             Int
  technicians         User[]    @relation("TechnicianServiceRequests")
  problemDescription  String
  comments            String?
  status              RequestStatus @default(OPEN)
  priority            RequestPriority @default(MEDIUM)
  createdDate         DateTime  @default(now())
  resolvedDate        DateTime?
  attachments         String?
  updatedAt           DateTime  @updatedAt
}

model ProductCategory {
  id          String    @id @default(cuid())
  name        String
  description String?
  products    Product[]
}

model KioskInventory {
  id                String    @id @default(cuid())
  kiosk             Kiosk     @relation(fields: [kioskId], references: [id])
  kioskId           Int
  product           Product   @relation(fields: [productId], references: [id])
  productId         String
  quantity          Int       @default(0)
  lastRestocked     DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model InventoryMovement {
  id                String    @id @default(cuid())
  kiosk             Kiosk     @relation(fields: [kioskId], references: [id])
  kioskId           Int
  product           Product   @relation(fields: [productId], references: [id])
  productId         String
  movementType      String
  quantity          Int
  reason            String?
  createdBy         User      @relation(fields: [createdById], references: [id])
  createdById       String
  movementDate      DateTime  @default(now())
}

model LocationHistory {
  id              String    @id @default(cuid())
  kiosk           Kiosk     @relation(fields: [kioskId], references: [id])
  kioskId         Int
  oldLocation     String?
  newLocation     String?
  validatedBy     User?     @relation(fields: [validatedById], references: [id])
  validatedById   String?
  createdAt       DateTime  @default(now())
}

model Payment {
  id              String    @id @default(cuid())
  invoice         Invoice   @relation(fields: [invoiceId], references: [id])
  invoiceId       String
  amount          Decimal
  paymentDate     DateTime
  paymentMethod   String?
}

model Invoice {
  id              String    @id @default(cuid())
  clientOrVendor  String?
  type            String?
  issueDate       DateTime?
  termsConditions String?
  contract        Contract  @relation(fields: [contractId], references: [id])
  contractId      String
  amount          Decimal
  dueDate         DateTime?
  status          InvoiceStatus @default(PENDING)
  payments        Payment[]
}

model Notification {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  message     String
  status      NotificationStatus @default(SENT)
}

model Prospect {
  id          String    @id @default(cuid())
  name        String?
  contact     String?
  need        String?
  statusId    String?
  assignedTo  User?     @relation(fields: [assignedToId], references: [id])
  assignedToId String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  actions     ProspectAction[]
  quotes      Quote[]
}

model ProspectAction {
  id            String    @id @default(cuid())
  prospect      Prospect  @relation(fields: [prospectId], references: [id])
  prospectId    String
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  actionType    String
  actionDetails String?
  createdAt     DateTime  @default(now())
}

model Quote {
  id          String    @id @default(cuid())
  prospect    Prospect  @relation(fields: [prospectId], references: [id])
  prospectId  String
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  services    String?
  totalCost   Decimal?
  deadlineDate DateTime?
  pdfUrl      String?
  createdAt   DateTime  @default(now())
}

model Report {
  id              String    @id @default(cuid())
  type            String
  generatedBy     User      @relation(fields: [generatedById], references: [id])
  generatedById   String
  validationDate  DateTime?
  createdAt       DateTime  @default(now())
}

enum Role {
  CLIENT
  RESPONSABLE
  TECHNICIEN
  SUPERADMIN
  COMMERCIAL
  ADMIN
  JURIDIQUE
  CLIENTADMIN
  COMPTABLE
}

enum KioskType {
  ONE_COMPARTMENT_WITH_BRANDING
  THREE_COMPARTMENT_WITH_BRANDING
  ONE_COMPARTMENT_WITHOUT_BRANDING
  THREE_COMPARTMENT_WITHOUT_BRANDING
}

enum KioskStatus {
  REQUEST
  LOCALIZING
  AVAILABLE
  UNDER_MAINTENANCE
}

enum ContractStatus {
  ACTIVE
  EXPIRED
  PENDING
}

enum RequestStatus {
  OPEN
  IN_PROGRESS
  UNDER_REVIEW
  CLOSED
}

enum RequestPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum InvoiceStatus {
  PAID
  PENDING
  OVERDUE
}

enum UserStatus {
  PENDING
  VERIFIED
  ONLINE
  OFFLINE
}

enum NotificationStatus {
  SENT
  VIEWED
}